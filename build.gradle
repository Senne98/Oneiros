plugins {
    id 'java'
    id "xyz.jpenilla.run-paper" version "2.3.1" // Adds runServer and runMojangMappedServer tasks for testing

    //id "io.papermc.paperweight.userdev" version "2.0.0-beta.14"
}

group = 'com.senne'
version = '0.0.1-ALPHA'

repositories {
    maven {
        name = "jitpack"
        url 'https://jitpack.io'
    }
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")

    //test
    testImplementation 'com.github.MockBukkit:MockBukkit:v1.21-SNAPSHOT'
    testImplementation("org.junit.jupiter:junit-jupiter:5.11.4")
    testImplementation(platform("org.junit:junit-bom:5.11.4"))
    //paperweight.paperDevBundle("1.21.4-R0.1-SNAPSHOT")
}

/*tasks.assemble {
    paperweight.reobfArtifactConfiguration = io.papermc.paperweight.userdev.ReobfArtifactConfiguration.MOJANG_PRODUCTION
}*/

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21.4")
    }
    test {
        useJUnitPlatform()
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

task configureRun {
    doFirst {
        def filePath = '/home/senne/Documents/onedrive/Documenten/mineraft/Oneiros/Oneiros/run/world/session.lock'
        def file = new File(filePath)
        if (file.exists()) {
            file.delete()
            println "Removing world/session.lock"

        }

        filePath = '/home/senne/Documents/onedrive/Documenten/mineraft/Oneiros/Oneiros/run/world_nether/session.lock'
        file = new File(filePath)
        if (file.exists()) {
            file.delete()
            println "Removing world_nether/session.lock"
        }

        filePath = '/home/senne/Documents/onedrive/Documenten/mineraft/Oneiros/Oneiros/run/world_the_end/session.lock'
        file = new File(filePath)
        if (file.exists()) {
            file.delete()
            println "Removing world_end/session.lock"
        }

        def port = 25565 // The port you want to check

        def checkPortCommand = "lsof -i :${port}"
        def process = checkPortCommand.execute()
        def output = process.text

        def lines = output.split('\n')
        def processCount = lines.size() - 1 // Subtract the header line

        if (processCount > 1) {
            println "Multiple programs are connected to port ${port}. Waiting for 20 seconds."
            Thread.sleep(20000) // Wait for 5 seconds (5000 milliseconds)
        } else {
            println "Less than 2 programs are connected to port ${port}. No need to wait."
        }


        def isPortOpen = false
        def pid = null

        // Check if the port is open (Unix-based systems)
        checkPortCommand = "lsof -i :${port}"
        process = checkPortCommand.execute()
        output = process.text

        if (output) {
            isPortOpen = true
            lines = output.split('\n')
            // Extract the PID from the lsof command output
            if (lines.size() > 1) {
                def columns = lines[1].split()
                pid = columns[1] // PID is in the second column
            }
        }

        if (isPortOpen && pid) {
            println "Port ${port} is open. Stopping program with PID ${pid}."
            // Stop the program using the PID (Unix-based systems)
            def killCommand = "kill -9 ${pid}"
            killCommand.execute().waitFor()

        }
    }
}

tasks.runServer {
    dependsOn configureRun
}
